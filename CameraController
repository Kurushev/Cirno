
public class CameraController : MonoBehaviour {

	public Camera gameCamera;
	public Terrain gameTerrain;
	float cameraSize = 30;
	float cameraSizeMax = 50;
	float cameraSizeMin = 20;
	float cameraMovementDelta = 30; //Значение отвечает за то, насколько ограничена плоскость движения камеры по краям относительно размера террейна.
	float cameraMovementRangeXMax;
	float cameraMovementRangeZMax;
	float cameraMovementRangeXMin;
	float cameraMovementRangeZMin;
	public int cameraZoomMultiplier = 1;
	Quaternion cameraQuaternion;

	// Use this for initialization
	void Start () {
	//Здесь можно будет задать стартовые параметры камеры.

		cameraMovementRangeXMax = gameTerrain.terrainData.size.x - cameraMovementDelta;
		cameraMovementRangeZMax = gameTerrain.terrainData.size.z - cameraMovementDelta - 10;
		cameraMovementRangeXMin = cameraMovementDelta;
		cameraMovementRangeZMin = -5;
		cameraQuaternion = gameCamera.transform.rotation;

	}
	
	// Update is called once per frame
	void Update () {
		//В юнити есть поняте Axis, вертикальной и горизонтальной, им можно назначать кнопки.
		//Для меня загадка, почему я передаю значение параметру Y, а изменяется параметр Z, но может просветлюсь позже.
		Vector3 moveDirection = new Vector3(Input.GetAxis("Horizontal"), Input.GetAxis("Vertical"), 0.0f);


		if ((gameCamera.transform.position.x < cameraMovementRangeXMin && moveDirection.x < 0) ||
		    (gameCamera.transform.position.x > cameraMovementRangeXMax && moveDirection.x > 0)) {
			moveDirection.x = 0;
		} 

		if ((gameCamera.transform.position.z < cameraMovementRangeZMin && moveDirection.y < 0) ||
		    (gameCamera.transform.position.z > cameraMovementRangeZMax && moveDirection.y > 0)) {
			moveDirection.y = 0;
		} 
		moveDirection.z = 0;

		gameCamera.transform.Translate (moveDirection);


		//Реализация зума по вращению колеса мыши, множитель (cameraZoomMultiplier) сделан пабликом чтобы менять его свойства прямо из юнити.
		if 		(Input.GetAxis ("Mouse ScrollWheel") < 0 && cameraSize >= cameraSizeMin) {cameraSize -= cameraZoomMultiplier;}
		else if	(Input.GetAxis ("Mouse ScrollWheel") > 0 && cameraSize <= cameraSizeMax) {cameraSize += cameraZoomMultiplier;}
		gameCamera.orthographicSize = cameraSize;

		/* Здесь была попытка высчитать дельту, на которую надо ограничивать смещение камеры, но значения оказались слишком далеки от реальных.
		 * Соответственно идея была простая, посчитать гипотенузу через угол и катет, затем посчитать собственно катет, который искомая дельта
		float hypo = cameraYPosition / Mathf.Sin(Mathf.Deg2Rad * gameCamera.fieldOfView);
		float delta = Mathf.Sqrt (hypo * hypo - cameraYPosition * cameraYPosition);
		Debug.Log (delta);
		*/

		
	}
}
